/*
 * @lc app=leetcode.cn id=2197 lang=typescript
 *
 * [2197] 替换数组中的非互质数
 *
 * https://leetcode.cn/problems/replace-non-coprime-numbers-in-array/description/
 *
 * algorithms
 * Hard (37.31%)
 * Likes:    52
 * Dislikes: 0
 * Total Accepted:    13.3K
 * Total Submissions: 29.9K
 * Testcase Example:  '[6,4,3,2,7,6,2]'
 *
 * 给你一个整数数组 nums 。请你对数组执行下述操作：
 *
 *
 * 从 nums 中找出 任意 两个 相邻 的 非互质 数。
 * 如果不存在这样的数，终止 这一过程。
 * 否则，删除这两个数，并 替换 为它们的 最小公倍数（Least Common Multiple，LCM）。
 * 只要还能找出两个相邻的非互质数就继续 重复 这一过程。
 *
 *
 * 返回修改后得到的 最终 数组。可以证明的是，以 任意 顺序替换相邻的非互质数都可以得到相同的结果。
 *
 * 生成的测试用例可以保证最终数组中的值 小于或者等于 10^8 。
 *
 * 两个数字 x 和 y 满足 非互质数 的条件是：GCD(x, y) > 1 ，其中 GCD(x, y) 是 x 和 y 的 最大公约数 。
 *
 *
 *
 * 示例 1 ：
 *
 *
 * 输入：nums = [6,4,3,2,7,6,2]
 * 输出：[12,7,6]
 * 解释：
 * - (6, 4) 是一组非互质数，且 LCM(6, 4) = 12 。得到 nums = [12,3,2,7,6,2] 。
 * - (12, 3) 是一组非互质数，且 LCM(12, 3) = 12 。得到 nums = [12,2,7,6,2] 。
 * - (12, 2) 是一组非互质数，且 LCM(12, 2) = 12 。得到 nums = [12,7,6,2] 。
 * - (6, 2) 是一组非互质数，且 LCM(6, 2) = 6 。得到 nums = [12,7,6] 。
 * 现在，nums 中不存在相邻的非互质数。
 * 因此，修改后得到的最终数组是 [12,7,6] 。
 * 注意，存在其他方法可以获得相同的最终数组。
 *
 *
 * 示例 2 ：
 *
 *
 * 输入：nums = [2,2,1,1,3,3,3]
 * 输出：[2,1,1,3]
 * 解释：
 * - (3, 3) 是一组非互质数，且 LCM(3, 3) = 3 。得到 nums = [2,2,1,1,3,3] 。
 * - (3, 3) 是一组非互质数，且 LCM(3, 3) = 3 。得到 nums = [2,2,1,1,3] 。
 * - (2, 2) 是一组非互质数，且 LCM(2, 2) = 2 。得到 nums = [2,1,1,3] 。
 * 现在，nums 中不存在相邻的非互质数。
 * 因此，修改后得到的最终数组是 [2,1,1,3] 。
 * 注意，存在其他方法可以获得相同的最终数组。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= nums.length <= 10^5
 * 1 <= nums[i] <= 10^5
 * 生成的测试用例可以保证最终数组中的值 小于或者等于 10^8 。
 *
 *
 */

// @lc code=start
/**
 * 替换数组中的非互质数，直到没有相邻的非互质数为止
 *
 * @param nums - 输入的整数数组
 * @returns 替换后最终的数组
 *
 * @example
 * ```typescript
 * replaceNonCoprimes([6,4,3,2,7,6,2]); // [12,7,6]
 * replaceNonCoprimes([2,2,1,1,3,3,3]); // [2,1,1,3]
 * ```
 */
function replaceNonCoprimes(nums: number[]): number[] {
  // 使用栈结构模拟合并过程
  const res: number[] = [];
  for (let num of nums) {
    // 尝试与栈顶元素合并，直到无法合并为止
    while (res.length) {
      const last = res[res.length - 1];
      const g = gcd(last, num);
      if (g > 1) {
        // last和num非互质，合并为最小公倍数
        num = lcm(last, num, g);
        res.pop(); // 弹出栈顶，继续尝试与新的栈顶合并
      } else {
        break; // 栈顶与num互质，停止合并
      }
    }
    res.push(num);
  }
  return res;

  /**
   * 计算最大公约数（欧几里得算法）
   */
  function gcd(a: number, b: number): number {
    return b === 0 ? a : gcd(b, a % b);
  }

  /**
   * 计算最小公倍数，已知gcd
   */
  function lcm(a: number, b: number, g: number): number {
    // 防止溢出，先除后乘
    return Math.floor(a / g) * b;
  }
}

/*
解题思路详解：

1. 问题本质：
  - 不断合并相邻的非互质数（gcd>1），用它们的最小公倍数替换，直到数组中没有相邻的非互质数
  - 合并顺序任意，最终结果唯一

2. 算法分析：
  - 时间复杂度：O(n log M)，n为数组长度，M为数值大小（每次合并最多O(logM)）
  - 空间复杂度：O(n)，栈空间
  - 算法类型：单调栈+数论（gcd/lcm）

3. 实现要点：
  - 用栈模拟合并过程，每次尝试与栈顶元素合并
  - 合并时用lcm替换，继续与新的栈顶尝试，直到无法合并
  - gcd用欧几里得算法，lcm用先除后乘防止溢出

4. 示例分析：
  - 示例1：nums = [6,4,3,2,7,6,2]
    - 6,4 -> lcm=12 => [12,3,2,7,6,2]
    - 12,3 -> lcm=12 => [12,2,7,6,2]
    - 12,2 -> lcm=12 => [12,7,6,2]
    - 6,2 -> lcm=6 => [12,7,6]
    - 无法再合并，返回[12,7,6]
  - 示例2：nums = [2,2,1,1,3,3,3]
    - 3,3 -> 3 => [2,2,1,1,3,3]
    - 3,3 -> 3 => [2,2,1,1,3]
    - 2,2 -> 2 => [2,1,1,3]
    - 返回[2,1,1,3]

5. 边界情况：
  - 所有数互质：返回原数组
  - 所有数都能合并：最终只剩一个数
  - 数组长度为1：直接返回

6. 常见错误：
  - 合并后未继续与新栈顶尝试合并
  - lcm计算顺序错误导致溢出
  - gcd实现错误

7. 优化要点：
  - 先除后乘防止lcm溢出
  - 用栈结构高效模拟合并过程

8. 扩展思考：
  - 如果合并规则变为“互质数”怎么办？
  - 如果需要记录合并过程路径？
  - 如何处理大数溢出？

9. 类似问题：
  - 区间合并、单调栈相关题目
  - 数组消消乐、合并同类项
*/
// @lc code=end
