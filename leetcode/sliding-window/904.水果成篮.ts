/*
 * @lc app=leetcode.cn id=904 lang=typescript
 *
 * [904] 水果成篮
 *
 * https://leetcode.cn/problems/fruit-into-baskets/description/
 *
 * algorithms
 * Medium (43.98%)
 * Likes:    308
 * Dislikes: 0
 * Total Accepted:    74.6K
 * Total Submissions: 169.9K
 * Testcase Example:  '[1,2,1]'
 *
 * 你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。
 *
 * 你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：
 *
 *
 * 你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。
 * 你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果
 * 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。
 * 一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。
 *
 *
 * 给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：fruits = [1,2,1]
 * 输出：3
 * 解释：可以采摘全部 3 棵树。
 *
 *
 * 示例 2：
 *
 *
 * 输入：fruits = [0,1,2,2]
 * 输出：3
 * 解释：可以采摘 [1,2,2] 这三棵树。
 * 如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。
 *
 *
 * 示例 3：
 *
 *
 * 输入：fruits = [1,2,3,2,2]
 * 输出：4
 * 解释：可以采摘 [2,3,2,2] 这四棵树。
 * 如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。
 *
 *
 * 示例 4：
 *
 *
 * 输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]
 * 输出：5
 * 解释：可以采摘 [1,2,1,1,2] 这五棵树。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= fruits.length <= 10^5
 * 0 <= fruits[i] < fruits.length
 *
 *
 */

// @lc code=start
/**
 * 滑动窗口算法解决水果成篮问题
 *
 * 核心思想：维护一个最多包含两种水果类型的滑动窗口
 * 当窗口内水果类型超过2种时，收缩左边界直到满足条件
 */
function totalFruit(fruits: number[]): number {
  const n = fruits.length;
  // 使用 Map 记录窗口内每种水果的数量
  const counts: Map<number, number> = new Map();

  let res = 0; // 记录最大水果数量
  let left = 0; // 滑动窗口左边界

  // 遍历数组，right 作为滑动窗口右边界
  for (let right = 0; right < n; right++) {
    // 将当前水果加入窗口，更新计数
    counts.set(fruits[right], (counts.get(fruits[right]) ?? 0) + 1);

    // 当窗口内水果类型超过2种时，需要收缩左边界
    while (counts.size > 2) {
      // 减少左边界水果的计数
      counts.set(fruits[left], counts.get(fruits[left])! - 1);
      // 如果某种水果数量变为0，从 Map 中删除
      if (counts.get(fruits[left]) === 0) {
        counts.delete(fruits[left]);
      }
      left++; // 左边界右移
    }

    // 更新最大水果数量（窗口大小）
    res = Math.max(res, right - left + 1);
  }

  return res;
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 寻找最长的连续子数组，该子数组最多包含两种不同的水果类型
   - 这是一个典型的滑动窗口问题，需要维护窗口内水果类型的数量

2. 算法分析：
   - 时间复杂度：O(n)，其中 n 是数组长度
     * 每个元素最多被访问两次（加入窗口和移出窗口）
     * 虽然内层有 while 循环，但每个元素最多被处理 O(1) 次
   - 空间复杂度：O(1)
     * Map 最多存储 3 种水果类型（超过 2 种时会立即收缩）
     * 在本题约束下，水果类型数量有限

3. 实现要点：
   - 使用 Map 数据结构记录窗口内每种水果的数量
   - 滑动窗口维护最多 2 种水果类型的约束
   - 当窗口内水果类型超过 2 种时，通过收缩左边界来满足条件
   - 实时更新最大窗口大小作为结果

4. 关键技巧：
   - 使用 Map.size 快速判断窗口内水果类型数量
   - 当某种水果计数为 0 时，及时从 Map 中删除以保持 size 准确
   - 窗口大小计算：right - left + 1

5. 边界情况处理：
   - 空数组：返回 0
   - 数组长度小于等于 2：直接返回数组长度
   - 所有水果类型相同：返回数组长度

6. 算法优化：
   - 使用 Map 而不是对象，避免处理数字键的字符串转换
   - 使用 nullish coalescing (??) 简化计数逻辑
   - 及时删除计数为 0 的水果类型，保持 Map.size 的准确性

7. 类似问题：
   - 159. 至多包含两个不同字符的最长子串
   - 340. 至多包含 K 个不同字符的最长子串
   - 1004. 最大连续 1 的个数 III
   - 424. 替换后的最长重复字符

8. 常见错误：
   - 忘记在水果计数为 0 时从 Map 中删除
   - 窗口大小计算错误（应该是 right - left + 1）
   - 没有正确处理所有水果类型相同的情况
*/
