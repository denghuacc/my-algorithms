/*
 * @lc app=leetcode.cn id=2294 lang=typescript
 *
 * [2294] 划分数组使最大差为 K
 *
 * https://leetcode.cn/problems/partition-array-such-that-maximum-difference-is-k/description/
 *
 * algorithms
 * Medium (69.72%)
 * Likes:    31
 * Dislikes: 0
 * Total Accepted:    15.8K
 * Total Submissions: 21.3K
 * Testcase Example:  '[3,6,1,2,5]\n2'
 *
 * 给你一个整数数组 nums 和一个整数 k 。你可以将 nums 划分成一个或多个 子序列 ，使 nums 中的每个元素都 恰好 出现在一个子序列中。
 *
 * 在满足每个子序列中最大值和最小值之间的差值最多为 k 的前提下，返回需要划分的 最少 子序列数目。
 *
 * 子序列 本质是一个序列，可以通过删除另一个序列中的某些元素（或者不删除）但不改变剩下元素的顺序得到。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：nums = [3,6,1,2,5], k = 2
 * 输出：2
 * 解释：
 * 可以将 nums 划分为两个子序列 [3,1,2] 和 [6,5] 。
 * 第一个子序列中最大值和最小值的差值是 3 - 1 = 2 。
 * 第二个子序列中最大值和最小值的差值是 6 - 5 = 1 。
 * 由于创建了两个子序列，返回 2 。可以证明需要划分的最少子序列数目就是 2 。
 *
 *
 * 示例 2：
 *
 *
 * 输入：nums = [1,2,3], k = 1
 * 输出：2
 * 解释：
 * 可以将 nums 划分为两个子序列 [1,2] 和 [3] 。
 * 第一个子序列中最大值和最小值的差值是 2 - 1 = 1 。
 * 第二个子序列中最大值和最小值的差值是 3 - 3 = 0 。
 * 由于创建了两个子序列，返回 2 。注意，另一种最优解法是将 nums 划分成子序列 [1] 和 [2,3] 。
 *
 *
 * 示例 3：
 *
 *
 * 输入：nums = [2,2,4,5], k = 0
 * 输出：3
 * 解释：
 * 可以将 nums 划分为三个子序列 [2,2]、[4] 和 [5] 。
 * 第一个子序列中最大值和最小值的差值是 2 - 2 = 0 。
 * 第二个子序列中最大值和最小值的差值是 4 - 4 = 0 。
 * 第三个子序列中最大值和最小值的差值是 5 - 5 = 0 。
 * 由于创建了三个子序列，返回 3 。可以证明需要划分的最少子序列数目就是 3 。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= nums.length <= 10^5
 * 0 <= nums[i] <= 10^5
 * 0 <= k <= 10^5
 *
 *
 */

export {};

// @lc code=start
function partitionArray(nums: number[], k: number): number {
  // 1. 对数组进行升序排序，这样相邻元素差值最小，便于贪心分组
  nums.sort((a, b) => a - b);

  // 2. 初始化结果计数器
  let res = 0;

  // 3. 记录当前子序列的最小值，初始为负无穷确保第一个元素会开启新组
  let min = -Infinity;

  // 4. 遍历排序后的数组
  for (const num of nums) {
    // 如果当前元素与当前组最小值的差超过k，需要开启新的子序列
    if (num - min > k) {
      res++; // 子序列数量加1
      min = num; // 更新新子序列的最小值为当前元素
    }
    // 如果差值不超过k，当前元素可以加入当前子序列，不需要更新min
    // 因为数组已排序，min始终是当前子序列的最小值
  }

  return res;
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 将数组划分为若干子序列，每个子序列内最大值与最小值差不超过k
   - 求最少需要多少个子序列
   - 这是一个典型的贪心算法问题

2. 算法分析：
   - 时间复杂度：O(n log n) - 主要来自排序操作
   - 空间复杂度：O(1) - 只使用了常数级别的额外空间
   - 算法类型：贪心算法 + 排序

3. 实现要点：
   
   核心思想：
   - 贪心策略：尽可能让每个子序列包含更多元素
   - 排序优化：先排序可以确保在线性时间内找到最优划分
   
   关键步骤：
   - 第一步：对数组升序排序，使得相邻元素差值最小
   - 第二步：贪心地遍历数组，尽可能将元素加入当前子序列
   - 第三步：当差值超过k时，开启新的子序列
   
   数据结构选择：
   - 使用简单的计数器记录子序列数量
   - 用一个变量记录当前子序列的最小值
   
   边界情况处理：
   - min初始化为-Infinity，确保第一个元素必定开启新组
   - 空数组情况下返回0（由于题目约束1 <= nums.length，不会出现）

4. 算法正确性证明：
   
   贪心选择性质：
   - 排序后，如果元素a和元素c可以在同一组，且a < b < c，那么b也一定可以在这一组
   - 因此贪心地将连续的符合条件的元素放在一组是最优的
   
   最优子结构：
   - 每次开启新组时，都是因为当前元素无法加入现有组
   - 这种选择对后续的划分不会产生负面影响

5. 示例分析：

   示例1: nums = [3,6,1,2,5], k = 2
   - 排序后: [1,2,3,5,6]
   - 第一组: [1,2,3] (3-1=2 ≤ k)
   - 第二组: [5,6] (6-5=1 ≤ k)
   - 结果: 2个子序列

   示例2: nums = [1,2,3], k = 1  
   - 排序后: [1,2,3]
   - 第一组: [1,2] (2-1=1 ≤ k)
   - 第二组: [3] (3-1=2 > k，需要新组)
   - 结果: 2个子序列

6. 优化要点：
   
   时间优化：
   - 排序是必要的，无法进一步优化时间复杂度
   - 遍历过程是O(n)，已经是最优的
   
   空间优化：
   - 原地排序，只使用O(1)额外空间
   - 避免使用额外的数据结构存储分组信息

7. 类似问题：
   - 区间调度问题
   - 贪心分组类问题
   - 数组划分优化问题

8. 常见错误：
   - 忘记排序：直接遍历原数组无法保证最优解
   - 错误的贪心策略：比如按照元素值进行分组而不是按照差值
   - 边界处理：min初始值设置不当导致第一个元素处理错误
*/
