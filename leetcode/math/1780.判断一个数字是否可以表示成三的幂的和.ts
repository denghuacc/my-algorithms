/*
 * @lc app=leetcode.cn id=1780 lang=typescript
 *
 * [1780] 判断一个数字是否可以表示成三的幂的和
 *
 * https://leetcode.cn/problems/check-if-number-is-a-sum-of-powers-of-three/description/
 *
 * algorithms
 * Medium (67.50%)
 * Likes:    52
 * Dislikes: 0
 * Total Accepted:    13.9K
 * Total Submissions: 19.2K
 * Testcase Example:  '12'
 *
 * 给你一个整数 n ，如果你可以将 n 表示成若干个不同的三的幂之和，请你返回 true ，否则请返回 false 。
 *
 * 对于一个整数 y ，如果存在整数 x 满足 y == 3^x ，我们称这个整数 y 是三的幂。
 *
 *
 *
 * 示例 1：
 *
 * 输入：n = 12
 * 输出：true
 * 解释：12 = 3^1 + 3^2
 *
 *
 * 示例 2：
 *
 * 输入：n = 91
 * 输出：true
 * 解释：91 = 3^0 + 3^2 + 3^4
 *
 *
 * 示例 3：
 *
 * 输入：n = 21
 * 输出：false
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= n <= 10^7
 *
 *
 */

// @lc code=start
function checkPowersOfThree(n: number): boolean {
  // 核心思想：将n转换为三进制，检查每一位是否只包含0或1
  // 如果n可以表示为若干个不同的三的幂之和，那么n的三进制表示中不能包含数字2
  // 因为如果某一位是2，意味着需要两个相同的三的幂，违背了"不同"的要求

  while (n > 0) {
    // 获取n在三进制下的最低位
    const remainder = n % 3;

    // 如果某一位是2，说明需要两个相同的三的幂才能组成
    // 例如：n=8时，8=2*3^1+2*3^0，需要两个3^1和两个3^0
    // 但题目要求是"不同的"三的幂之和，所以返回false
    if (remainder === 2) {
      return false;
    }

    // 继续检查下一位（相当于三进制右移一位）
    n = Math.floor(n / 3);
  }

  // 如果所有位都是0或1，说明可以表示为不同三的幂之和
  return true;
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 判断一个数字n是否可以表示成若干个不同的三的幂之和
   - 关键词是"不同"，即每个三的幂最多只能使用一次
   - 三的幂序列：3^0=1, 3^1=3, 3^2=9, 3^3=27, 3^4=81, ...

2. 核心洞察：
   - 如果n可以表示为不同三的幂之和，那么n的三进制表示中每一位只能是0或1
   - 三进制中的每一位对应一个三的幂：
     * 第0位对应3^0=1
     * 第1位对应3^1=3  
     * 第2位对应3^2=9
     * 以此类推
   - 如果某一位是2，意味着需要使用两次相同的三的幂，违背了"不同"的要求

3. 算法步骤：
   - 不断取n对3的余数（获取三进制的每一位）
   - 如果余数是2，立即返回false
   - 将n除以3继续检查下一位
   - 如果所有位都检查完毕且没有遇到2，返回true

4. 示例分析：
   - n=12: 12的三进制是110，每位都是0或1，所以返回true（12=3^1+3^2）
   - n=21: 21的三进制是210，包含数字2，所以返回false
   - n=91: 91的三进制是10101，每位都是0或1，所以返回true（91=3^0+3^2+3^4）

5. 复杂度分析：
   - 时间复杂度：O(log₃n)，需要检查n的三进制表示的每一位
   - 空间复杂度：O(1)，只使用常数额外空间
   - 关键观察：三进制位数约为log₃n，因为3^k ≈ n时，k ≈ log₃n

6. 算法要点总结：
   - 核心技巧：三进制表示与三的幂之和的对应关系
   - 通用方法：对于k进制数字的组成问题，可以考虑转换到对应进制分析
   - 优化要点：直接在转换过程中检查，无需存储完整的三进制字符串

7. 边界情况：
   - n=1：1的三进制是1，返回true（1=3^0）
   - n=2：2的三进制是2，返回false（无法用不同的三的幂表示）
   - n=3：3的三进制是10，返回true（3=3^1）

8. 常见错误：
   - 错误理解题意：忘记"不同"这个关键约束
   - 实现错误：使用n%3==2而不是remainder==2进行比较
   - 边界处理：忘记处理n=0的情况（实际上n>=1）
*/
