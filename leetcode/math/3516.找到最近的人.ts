/*
 * @lc app=leetcode.cn id=3516 lang=typescript
 *
 * [3516] 找到最近的人
 *
 * https://leetcode.cn/problems/find-closest-person/description/
 *
 * algorithms
 * Easy (89.33%)
 * Likes:    17
 * Dislikes: 0
 * Total Accepted:    20.4K
 * Total Submissions: 23.1K
 * Testcase Example:  '2\n7\n4'
 *
 * 给你三个整数 x、y 和 z，表示数轴上三个人的位置：
 *
 *
 * x 是第 1 个人的位置。
 * y 是第 2 个人的位置。
 * z 是第 3 个人的位置，第 3 个人 不会移动 。
 *
 *
 * 第 1 个人和第 2 个人以 相同 的速度向第 3 个人移动。
 *
 * 判断谁会 先 到达第 3 个人的位置：
 *
 *
 * 如果第 1 个人先到达，返回 1 。
 * 如果第 2 个人先到达，返回 2 。
 * 如果两个人同时到达，返回 0 。
 *
 *
 * 根据上述规则返回结果。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入： x = 2, y = 7, z = 4
 *
 * 输出： 1
 *
 * 解释：
 *
 *
 * 第 1 个人在位置 2，到达第 3 个人（位置 4）需要 2 步。
 * 第 2 个人在位置 7，到达第 3 个人需要 3 步。
 *
 *
 * 由于第 1 个人先到达，所以输出为 1。
 *
 *
 * 示例 2：
 *
 *
 * 输入： x = 2, y = 5, z = 6
 *
 * 输出： 2
 *
 * 解释：
 *
 *
 * 第 1 个人在位置 2，到达第 3 个人（位置 6）需要 4 步。
 * 第 2 个人在位置 5，到达第 3 个人需要 1 步。
 *
 *
 * 由于第 2 个人先到达，所以输出为 2。
 *
 *
 * 示例 3：
 *
 *
 * 输入： x = 1, y = 5, z = 3
 *
 * 输出： 0
 *
 * 解释：
 *
 *
 * 第 1 个人在位置 1，到达第 3 个人（位置 3）需要 2 步。
 * 第 2 个人在位置 5，到达第 3 个人需要 2 步。
 *
 *
 * 由于两个人同时到达，所以输出为 0。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= x, y, z <= 100
 *
 *
 */

// @lc code=start
function findClosest(x: number, y: number, z: number): number {
  // 计算第1个人到第3个人的距离
  const dxz = Math.abs(x - z);
  // 计算第2个人到第3个人的距离
  const dyz = Math.abs(y - z);

  // 比较两个距离，返回先到达的人
  if (dxz < dyz) {
    return 1; // 第1个人先到达
  } else if (dxz > dyz) {
    return 2; // 第2个人先到达
  } else {
    return 0; // 同时到达
  }
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 这是一个简单的距离比较问题
   - 需要判断两个移动的人谁先到达目标位置
   - 由于两人速度相同，只需要比较距离即可

2. 算法分析：
   - 时间复杂度：O(1) - 只需要进行常数次计算
   - 空间复杂度：O(1) - 只使用了常数个变量
   - 算法类型：数学计算

3. 实现要点：
   - 使用 Math.abs() 计算绝对距离
   - 比较两个距离的大小关系
   - 根据比较结果返回对应的返回值

4. 优化思路：
   - 代码已经是最优解，无法进一步优化
   - 直接计算距离差，避免了复杂的逻辑判断
   - 使用简单的 if-else 结构，逻辑清晰

5. 关键观察：
   - 由于两人速度相同，距离近的人必然先到达
   - 距离相等时，两人同时到达
   - 这是一个纯数学问题，不需要考虑移动过程

6. 边界情况：
   - 所有输入都在 [1, 100] 范围内，无需特殊处理
   - 距离相等的情况已正确处理
   - 不存在无效输入的情况
*/
