/*
 * @lc app=leetcode.cn id=326 lang=typescript
 *
 * [326] 3的幂
 *
 * https://leetcode-cn.com/problems/power-of-three/description/
 *
 * algorithms
 * Easy (48.98%)
 * Likes:    193
 * Dislikes: 0
 * Total Accepted:    107.1K
 * Total Submissions: 215.4K
 * Testcase Example:  '27'
 *
 * 给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 true ；否则，返回 false 。
 *
 * 整数 n 是 3 的幂次方需满足：存在整数 x 使得 n == 3^x
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：n = 27
 * 输出：true
 *
 *
 * 示例 2：
 *
 *
 * 输入：n = 0
 * 输出：false
 *
 *
 * 示例 3：
 *
 *
 * 输入：n = 9
 * 输出：true
 *
 *
 * 示例 4：
 *
 *
 * 输入：n = 45
 * 输出：false
 *
 *
 *
 *
 * 提示：
 *
 *
 * -2^31
 *
 *
 *
 *
 * 进阶：
 *
 *
 * 你能不使用循环或者递归来完成本题吗？
 *
 *
 */

// @lc code=start
/**
 * 方法一：循环除法
 * 核心思想：如果n是3的幂，那么可以不断地被3整除，直到结果为1
 */
var isPowerOfThree = function (n: number): boolean {
  // 不断除以3，直到不能整除或n变为0
  // 条件：n !== 0 确保不会进入无限循环，n % 3 === 0 确保能被3整除
  while (n !== 0 && n % 3 === 0) {
    n = Math.floor(n / 3); // 整数除法，去除小数部分
  }

  // 如果最终结果是1，说明原数是3的幂
  // 如果是0或其他数，说明不是3的幂
  return n === 1;
};

/**
 * 方法二：数学技巧（整数限制）
 * 核心思想：在32位整数范围内，最大的3的幂是 3^19 = 1162261467
 * 如果n是3的幂，那么这个最大值一定能被n整除
 */
var isPowerOfThree = function (n: number): boolean {
  // 1162261467 = 3^19，是32位整数范围内最大的3的幂
  // 由于3是质数，1162261467的因子只有3的各个幂次：1, 3, 9, 27, ..., 1162261467
  // 所以如果n是3的幂，1162261467必定能被n整除
  return n > 0 && 1162261467 % n === 0;
};
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 判断一个整数是否为3的幂次方
   - 需要满足：存在整数x使得n == 3^x
   - 关键特点：3的幂只能被3整除，且除到最后必须是1

2. 算法分析：

   方法一 - 循环除法：
   - 时间复杂度：O(log₃n) - 需要除法操作log₃n次
   - 空间复杂度：O(1) - 只使用常数额外空间
   - 算法类型：数学模拟

   方法二 - 整数限制技巧：
   - 时间复杂度：O(1) - 只需要一次模运算
   - 空间复杂度：O(1) - 只使用常数额外空间
   - 算法类型：数学技巧

3. 实现要点：

   方法一关键逻辑：
   - while循环条件：n !== 0 && n % 3 === 0
     * n !== 0：防止n为0时进入无限循环
     * n % 3 === 0：确保能被3整除才继续
   - 循环体：n = Math.floor(n / 3) 进行整数除法
   - 返回判断：n === 1 表示最终除到了1

   方法二数学原理：
   - 32位整数范围：[-2³¹, 2³¹-1] = [-2147483648, 2147483647]
   - 最大3的幂：3¹⁹ = 1162261467 < 2³¹-1
   - 质数性质：3是质数，所以1162261467的因子只有3的各个幂
   - 整除判断：如果n是3的幂，则1162261467 % n === 0

4. 示例分析：

   示例1：n = 27
   方法一：27 → 9 → 3 → 1，返回true
   方法二：1162261467 % 27 = 0，返回true

   示例2：n = 0  
   方法一：while条件n !== 0为false，直接返回n === 1，即false
   方法二：n > 0为false，返回false

   示例3：n = 45
   方法一：45 → 15，15 % 3 !== 0，退出循环，返回15 === 1，即false
   方法二：1162261467 % 45 != 0，返回false

5. 边界情况：
   - n ≤ 0：两种方法都正确处理
     * 方法一：n !== 0 或最终 n !== 1
     * 方法二：n > 0 条件过滤
   - n = 1：1 = 3⁰，是3的幂，两种方法都返回true

6. 优化要点：
   - 方法一：简单直观，适合理解算法思路
   - 方法二：利用题目限制（32位整数），实现O(1)解法
   - 方法二完美回答了进阶问题：不使用循环或递归

7. 3的幂序列（32位范围内）：
   3⁰ = 1
   3¹ = 3  
   3² = 9
   3³ = 27
   3⁴ = 81
   ...
   3¹⁹ = 1162261467
   3²⁰ = 3486784401 > 2³¹-1 (超出范围)

8. 类似问题：
   - LeetCode 231: 2的幂
   - LeetCode 342: 4的幂  
   - 判断任意质数k的幂的问题都可以用方法二的思路
*/
