/*
 * @lc app=leetcode.cn id=812 lang=typescript
 *
 * [812] 最大三角形面积
 *
 * https://leetcode-cn.com/problems/largest-triangle-area/description/
 *
 * algorithms
 * Easy (54.02%)
 * Likes:    52
 * Dislikes: 0
 * Total Accepted:    5.8K
 * Total Submissions: 9.7K
 * Testcase Example:  '[[0,0],[0,1],[1,0],[0,2],[2,0]]'
 *
 * 给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。
 *
 *
 * 示例:
 * 输入: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
 * 输出: 2
 * 解释:
 * 这五个点如下图所示。组成的橙色三角形是最大的，面积为2。
 *
 *
 *
 *
 * 注意:
 *
 *
 * 3 <= points.length <= 50.
 * 不存在重复的点。
 * -50 <= points[i][j] <= 50.
 * 结果误差值在 10^-6 以内都认为是正确答案。
 *
 *
 */

// @lc code=start
function largestTriangleArea(points: number[][]): number {
  const n = points.length;
  let maxArea = 0;

  // 1. 暴力枚举所有可能的三点组合
  // 由于需要找到最大面积，必须检查所有 C(n,3) 种组合
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      for (let k = j + 1; k < n; k++) {
        // 2. 计算当前三点组成的三角形面积，并更新最大值
        const currentArea = calculateTriangleArea(
          points[i],
          points[j],
          points[k]
        );
        maxArea = Math.max(maxArea, currentArea);
      }
    }
  }

  return maxArea;

  /**
   * 计算三角形面积 - 使用叉积公式
   *
   * 给定三个顶点 A(x1, y1), B(x2, y2), C(x3, y3)
   * 三角形面积公式：S = 0.5 * |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|
   *
   * 展开后等价于：S = 0.5 * |x1*y2 + x2*y3 + x3*y1 - y1*x2 - y2*x3 - y3*x1|
   *
   * @param a 第一个顶点 [x1, y1]
   * @param b 第二个顶点 [x2, y2]
   * @param c 第三个顶点 [x3, y3]
   * @returns 三角形面积
   */
  function calculateTriangleArea(
    a: number[],
    b: number[],
    c: number[]
  ): number {
    const [x1, y1] = a;
    const [x2, y2] = b;
    const [x3, y3] = c;

    // 使用叉积公式计算面积
    // 公式来源：两个向量的叉积的模长等于它们构成的平行四边形面积
    // 三角形面积 = 平行四边形面积 / 2
    const crossProduct =
      x1 * y2 + x2 * y3 + x3 * y1 - y1 * x2 - y2 * x3 - y3 * x1;

    return 0.5 * Math.abs(crossProduct);
  }
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 从n个点中选择3个点组成三角形，求所有可能三角形中面积的最大值
   - 核心是三角形面积的计算和所有组合的遍历
   - 这是一个典型的组合优化问题

2. 算法分析：
   - 时间复杂度：O(n³) - 三重循环遍历所有三点组合
   - 空间复杂度：O(1) - 只使用常数级别的额外空间
   - 算法类型：暴力枚举 + 几何计算

3. 解题思路：
   - 核心思想：由于题目规模较小(n≤50)，可以使用暴力枚举所有可能的三点组合
   - 关键观察：需要计算C(n,3) = n!/(3!(n-3)!) 种组合的面积，找出最大值
   - 面积计算：使用向量叉积公式，避免复杂的海伦公式计算

4. 实现要点：
   - 数据结构选择：直接使用输入的二维数组，无需额外存储
   - 面积计算公式：使用叉积公式 S = 0.5 * |det([[x1,y1,1],[x2,y2,1],[x3,y3,1]])|
   - 边界条件处理：题目保证至少3个点，且不存在重复点
   - 优化技巧：三重循环使用 i < j < k 避免重复计算

5. 数学原理详解：
   
   三角形面积计算 - 向量叉积法：
   
   设三角形三个顶点为 A(x1,y1), B(x2,y2), C(x3,y3)
   
   方法1 - 行列式公式：
   面积 = 0.5 * |det([[x1, y1, 1],
                      [x2, y2, 1], 
                      [x3, y3, 1]])|
   
   方法2 - 向量叉积：
   向量AB = (x2-x1, y2-y1)
   向量AC = (x3-x1, y3-y1)  
   面积 = 0.5 * |AB × AC| = 0.5 * |(x2-x1)(y3-y1) - (y2-y1)(x3-x1)|
   
   方法3 - 展开式（本题使用）：
   面积 = 0.5 * |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|
        = 0.5 * |x1*y2 - x1*y3 + x2*y3 - x2*y1 + x3*y1 - x3*y2|
        = 0.5 * |x1*y2 + x2*y3 + x3*y1 - y1*x2 - y2*x3 - y3*x1|

6. 示例分析：
   
   输入：points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
   
   所有可能的三角形组合：
   - (0,0), (0,1), (1,0): 面积 = 0.5 * |0*1 + 0*0 + 1*0 - 0*0 - 1*1 - 0*0| = 0.5
   - (0,0), (0,1), (0,2): 面积 = 0 (三点共线)
   - (0,0), (0,1), (2,0): 面积 = 0.5 * |0*1 + 0*0 + 2*0 - 0*0 - 1*2 - 0*0| = 1
   - (0,0), (1,0), (0,2): 面积 = 0.5 * |0*0 + 1*2 + 0*0 - 0*1 - 0*0 - 2*0| = 1
   - (0,0), (1,0), (2,0): 面积 = 0 (三点共线)
   - (0,0), (0,2), (2,0): 面积 = 0.5 * |0*2 + 0*0 + 2*0 - 0*0 - 2*2 - 0*0| = 2
   - ...其他组合
   
   最大面积 = 2

7. 算法优化思考：
   
   当前解法优化点：
   - 避免重复计算：使用 i < j < k 确保每个组合只计算一次
   - 数值稳定性：使用绝对值避免负面积
   - 代码简洁：直接使用展开的叉积公式
   
   可能的优化方向（在更大规模下）：
   - 凸包算法：最大面积三角形的至少一边在凸包上
   - 几何剪枝：利用几何性质排除不可能的组合
   - 分治算法：在点数很多时可以考虑分治策略

8. 边界情况处理：
   - 三点共线：叉积为0，面积为0，不影响最大值计算
   - 坐标为负数：绝对值确保面积为正
   - 浮点精度：题目允许10^-6误差，JavaScript的double精度足够

9. 复杂度分析：
   
   时间复杂度：O(n³)
   - 三重循环：C(n,3) = n(n-1)(n-2)/6 ≈ n³/6
   - 面积计算：O(1)
   - 总体：O(n³)
   
   空间复杂度：O(1)
   - 只使用了几个变量存储中间结果
   - 没有使用额外的数据结构
   
   在 n ≤ 50 的约束下，最多需要计算 C(50,3) = 19600 次，完全可以接受

10. 扩展思考：
    - 如果要求最小面积三角形：同样的枚举框架，但要排除面积为0的情况
    - 如果要求所有三角形面积：返回数组而不是单个最大值
    - 3D空间中的最大三角形面积：需要使用3D向量叉积
    - 最大四边形面积：需要枚举4个点的组合，使用不同的面积公式

常见错误：
- 忘记取绝对值：三角形面积必须为正
- 重复计算：没有使用 i < j < k 的约束
- 公式错误：叉积公式的符号容易搞错
- 精度问题：在极端情况下可能出现数值误差
*/
