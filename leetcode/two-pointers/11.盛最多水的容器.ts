/*
 * @lc app=leetcode.cn id=11 lang=typescript
 *
 * [11] 盛最多水的容器
 *
 * https://leetcode-cn.com/problems/container-with-most-water/description/
 *
 * algorithms
 * Medium (51.85%)
 * Likes:    1258
 * Dislikes: 0
 * Total Accepted:    169.3K
 * Total Submissions: 271.6K
 * Testcase Example:  '[1,8,6,2,5,4,8,3,7]'
 *
 * 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为
 * (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
 *
 * 说明：你不能倾斜容器，且 n 的值至少为 2。
 *
 *
 *
 *
 *
 * 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
 *
 *
 *
 * 示例：
 *
 * 输入：[1,8,6,2,5,4,8,3,7]
 * 输出：49
 *
 */

// @lc code=start
/**
 * 解法一：双指针法（推荐）
 * 时间复杂度：O(n) - 每个元素最多被访问一次
 * 空间复杂度：O(1) - 只使用常数额外空间
 *
 * 核心思想：贪心 + 双指针
 * 关键洞察：移动较短的那条边才有可能找到更大的面积
 */
var maxArea = function (height: number[]): number {
  // 初始化双指针，分别指向数组两端
  let left = 0;
  let right = height.length - 1;
  let max = 0;

  // 双指针向中间移动，直到相遇
  while (left < right) {
    // 计算当前容器面积：高度 = 两条边的最小值，宽度 = 指针间距
    const area = Math.min(height[left], height[right]) * (right - left);
    // 更新最大面积
    max = Math.max(max, area);

    // 核心策略：移动较短的那条边
    // 原因：保留较长边，移动较短边才有可能增加面积
    if (height[left] <= height[right]) {
      ++left; // 左边较短或相等，移动左指针
    } else {
      --right; // 右边较短，移动右指针
    }
  }
  return max;
};

/**
 * 解法二：暴力枚举法
 * 时间复杂度：O(n²) - 需要枚举所有可能的两条边组合
 * 空间复杂度：O(1) - 只使用常数额外空间
 *
 * 思路：枚举所有可能的两条边，计算面积并维护最大值
 * 适用场景：理解问题本质，但实际应用中效率较低
 */
var maxArea = function (height: number[]): number {
  let ret = 0;

  // 外层循环：选择第一条边
  for (let i = 0; i < height.length - 1; i++) {
    // 内层循环：选择第二条边
    for (let j = i + 1; j < height.length; j++) {
      // 计算当前两条边构成的容器面积
      const max = Math.min(height[i], height[j]) * (j - i);
      // 更新最大面积
      if (max > ret) {
        ret = max;
      }
    }
  }

  return ret;
};
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 在数组中找到两条垂直线，使得它们与x轴构成的容器面积最大
   - 容器面积 = min(height[i], height[j]) × (j - i)
   - 核心约束：水的高度由较短的那条边决定（木桶效应）

2. 多种解法分析：

   解法一：双指针法（最优解）
   - 时间复杂度：O(n) - 线性时间，每个元素最多访问一次
   - 空间复杂度：O(1) - 常数空间
   - 算法类型：贪心算法 + 双指针技术
   - 核心思想：通过贪心策略避免无效的搜索

   解法二：暴力枚举法（基础解法）
   - 时间复杂度：O(n²) - 需要检查所有可能的组合
   - 空间复杂度：O(1) - 常数空间
   - 算法类型：穷举搜索
   - 适用场景：理解问题，小规模数据

3. 双指针法核心原理：

   关键洞察：
   - 移动较长的边不可能得到更大的面积
   - 只有移动较短的边才有希望找到更大的面积
   - 这个贪心策略保证了不会错过最优解

   数学证明：
   假设当前状态：left指向高度h1，right指向高度h2，且h1 ≤ h2
   - 当前面积 = h1 × (right - left)
   - 如果移动right，新面积 = min(h1, h3) × (right-1 - left)
   - 由于宽度减小，且高度最多是h1，所以新面积 ≤ 当前面积
   - 因此移动较长边是无效的，应该移动较短边

4. 算法步骤详解：

   步骤1：初始化
   - 设置左指针指向数组开始（left = 0）
   - 设置右指针指向数组结尾（right = n-1）
   - 初始化最大面积为0

   步骤2：双指针扫描
   - 计算当前两指针构成的面积
   - 更新最大面积记录
   - 移动指向较短边的指针

   步骤3：终止条件
   - 当left >= right时停止
   - 此时已经检查了所有可能产生最优解的组合

5. 示例分析：
   
   输入：height = [1,8,6,2,5,4,8,3,7]
   
   初始状态：left=0(height=1), right=8(height=7)
   - 面积 = min(1,7) × 8 = 8
   - 1 < 7，移动left
   
   第2步：left=1(height=8), right=8(height=7)
   - 面积 = min(8,7) × 7 = 49
   - 7 < 8，移动right
   
   第3步：left=1(height=8), right=7(height=3)
   - 面积 = min(8,3) × 6 = 18
   - 3 < 8，移动right
   
   继续这个过程直到left >= right
   最大面积 = 49

6. 关键技巧和注意点：

   贪心策略的正确性：
   - 移动较短边是唯一可能改进的方向
   - 这个策略保证了搜索空间的完整性
   - 不会遗漏任何可能的最优解

   边界条件处理：
   - 数组长度至少为2（题目保证）
   - 高度为非负整数（题目保证）
   - 指针相遇时算法结束

   实现细节：
   - 使用<=判断可以处理相等高度的情况
   - Math.min和Math.max的使用简化了代码

7. 算法优势分析：

   相比暴力法的优势：
   - 时间复杂度从O(n²)优化到O(n)
   - 空间复杂度保持O(1)不变
   - 算法思路更加优雅和高效

   双指针技术的通用性：
   - 这是双指针技术的经典应用
   - 类似技巧可用于其他优化问题
   - 体现了贪心算法的思想

8. 扩展问题和变种：

   相关问题：
   - LeetCode 42: 接雨水（一维版本）
   - LeetCode 407: 接雨水 II（二维版本）
   - 各种双指针优化问题

   问题变种：
   - 如果允许倾斜容器会如何？
   - 如果要求找到所有最大面积的组合？
   - 如果高度可以为负数会如何处理？

9. 实际应用场景：
   - 水库设计和容量计算
   - 仓储空间优化问题
   - 图形学中的面积计算
   - 资源分配优化问题

10. 常见错误和陷阱：
    - 错误理解移动策略（移动较长边）
    - 忘记更新最大面积
    - 边界条件处理错误
    - 面积计算公式错误

11. 复杂度分析总结：
    - 最优解时间复杂度：O(n)
    - 最优解空间复杂度：O(1)
    - 这是该问题的理论最优解
    - 无法进一步优化时间复杂度

12. 算法设计思想：
    - 贪心策略：每次选择最有希望的方向
    - 双指针技术：有效缩小搜索空间
    - 数学证明：确保算法正确性
    - 实现简洁：代码清晰且高效
*/
