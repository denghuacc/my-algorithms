/*
 * @lc app=leetcode.cn id=3487 lang=typescript
 *
 * [3487] 删除后的最大子数组元素和
 *
 * https://leetcode.cn/problems/maximum-unique-subarray-sum-after-deletion/description/
 *
 * algorithms
 * Easy (41.72%)
 * Likes:    10
 * Dislikes: 0
 * Total Accepted:    9.7K
 * Total Submissions: 20.4K
 * Testcase Example:  '[1,2,3,4,5]'
 *
 * 给你一个整数数组 nums 。
 *
 * 你可以从数组 nums 中删除任意数量的元素，但不能将其变为 空 数组。执行删除操作后，选出 nums 中满足下述条件的一个子数组：
 *
 *
 * 子数组中的所有元素 互不相同 。
 * 最大化 子数组的元素和。
 *
 *
 * 返回子数组的 最大元素和 。
 * 子数组 是数组的一个连续、非空 的元素序列。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：nums = [1,2,3,4,5]
 *
 * 输出：15
 *
 * 解释：
 *
 * 不删除任何元素，选中整个数组得到最大元素和。
 *
 *
 * 示例 2：
 *
 *
 * 输入：nums = [1,1,0,1,1]
 *
 * 输出：1
 *
 * 解释：
 *
 * 删除元素 nums[0] == 1、nums[1] == 1、nums[2] == 0 和 nums[3] == 1 。选中整个数组 [1]
 * 得到最大元素和。
 *
 *
 * 示例 3：
 *
 *
 * 输入：nums = [1,2,-1,-2,1,0,-1]
 *
 * 输出：3
 *
 * 解释：
 *
 * 删除元素 nums[2] == -1 和 nums[3] == -2 ，从 [1, 2, 1, 0, -1] 中选中子数组 [2, 1]
 * 以获得最大元素和。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= nums.length <= 100
 * -100 <= nums[i] <= 100
 *
 *
 */

// @lc code=start
function maxSum(nums: number[]): number {
  // 找到数组中的最大值，作为备选答案（当没有正数时使用）
  const maxVal = Math.max(...nums);

  // 创建包含所有正数的去重集合
  // 只保留正数是因为负数和0对最大和没有贡献
  const set = new Set(nums.filter((num) => num > 0));

  // 如果没有正数，说明数组中都是非正数
  // 此时最优策略是选择数组中最大的那个数
  if (set.size === 0) {
    return maxVal;
  }

  // 返回所有不重复正数组成的子数组就是最优解
  return [...set].reduce((a, b) => a + b, 0);
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 可以删除任意数量的元素（但不能全删），使得剩余元素形成一个子数组
   - 子数组中所有元素必须互不相同
   - 目标是最大化子数组的元素和

2. 算法分析：
   - 时间复杂度：O(n)，其中 n 是数组长度
   - 空间复杂度：O(n)，用于存储去重后的正数集合
   - 算法类型：贪心算法

3. 实现要点：
   - 关键观察：由于可以删除任意元素，最优策略是保留所有不重复的正数
   - 负数和0对最大和没有贡献，应该全部删除
   - 重复的正数只保留一个（因为要求互不相同）
   - 特殊情况：如果数组中没有正数，选择最大的数（可能是0或负数）

4. 优化思路：
   - 使用Set自动去重，避免手动处理重复元素
   - 一次遍历完成过滤和去重操作
   - 边界情况处理：当没有正数时返回数组最大值
*/
