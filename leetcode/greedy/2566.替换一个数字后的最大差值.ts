/*
 * @lc app=leetcode.cn id=2566 lang=typescript
 *
 * [2566] 替换一个数字后的最大差值
 *
 * https://leetcode.cn/problems/maximum-difference-by-remapping-a-digit/description/
 *
 * algorithms
 * Easy (64.05%)
 * Likes:    31
 * Dislikes: 0
 * Total Accepted:    12.8K
 * Total Submissions: 18.5K
 * Testcase Example:  '11891'
 *
 * 给你一个整数 num 。你知道 Danny Mittal 会偷偷将 0 到 9 中的一个数字 替换 成另一个数字。
 *
 * 请你返回将 num 中 恰好一个 数字进行替换后，得到的最大值和最小值的差为多少。
 *
 * 注意：
 *
 *
 * 当 Danny 将一个数字 d1 替换成另一个数字 d2 时，Danny 需要将 nums 中所有 d1 都替换成 d2 。
 * Danny 可以将一个数字替换成它自己，也就是说 num 可以不变。
 * Danny 可以将数字分别替换成两个不同的数字分别得到最大值和最小值。
 * 替换后得到的数字可以包含前导 0 。
 * Danny Mittal 获得周赛 326 前 10 名，让我们恭喜他。
 *
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：num = 11891
 * 输出：99009
 * 解释：
 * 为了得到最大值，我们将数字 1 替换成数字 9 ，得到 99899 。
 * 为了得到最小值，我们将数字 1 替换成数字 0 ，得到 890 。
 * 两个数字的差值为 99009 。
 *
 *
 * 示例 2：
 *
 *
 * 输入：num = 90
 * 输出：99
 * 解释：
 * 可以得到的最大值是 99（将 0 替换成 9），最小值是 0（将 9 替换成 0）。
 * 所以我们得到 99 。
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= num <= 10^8
 *
 *
 */

// @lc code=start
function minMaxDifference(num: number): number {
  // 将数字转换为字符串便于处理每一位
  let s = String(num);
  let t = s;

  // 寻找第一个不是'9'的数字位置，用于构造最大值
  let p = 0;
  while (p < s.length && s[p] === "9") {
    p++;
  }

  // 构造最大值：如果存在非'9'的数字，将其全部替换为'9'
  if (p < s.length) {
    const c = s[p]; // 记录要替换的数字
    s = s.replaceAll(c, "9"); // 将所有该数字替换为'9'
  }

  // 构造最小值：将第一位数字全部替换为'0'
  // 注意：第一位替换为'0'后可能产生前导0，这是允许的
  t = t.replaceAll(t[0], "0");

  // 返回最大值与最小值的差
  return Number(s) - Number(t);
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 通过替换数字中的某一位（所有相同位都要替换）来获得最大值和最小值
   - 目标是使最大值尽可能大，最小值尽可能小，从而获得最大差值

2. 算法分析：
   - 时间复杂度：O(n)，其中n是数字的位数，需要遍历字符串进行替换操作
   - 空间复杂度：O(n)，需要存储字符串副本
   - 算法类型：贪心算法

3. 实现要点：

   **构造最大值的策略：**
   - 从左到右找到第一个不是'9'的数字
   - 将所有该数字替换为'9'
   - 如果所有位都是'9'，则保持原数不变（已经是最大值）
   
   **构造最小值的策略：**
   - 将第一位数字的所有出现都替换为'0'
   - 这样可以使数值最小（允许前导0）
   - 例如：1891 → 替换'1'为'0' → 0890 = 890

   **关键观察：**
   - 要使数值最大，应该让高位尽可能大
   - 要使数值最小，应该让高位尽可能小
   - 替换规则要求所有相同数字都必须替换

4. 优化思路：
   - 使用字符串操作比数学运算更直观
   - replaceAll方法确保所有相同数字都被替换
   - 直接操作字符串避免了复杂的数学计算

5. 边界情况处理：
   - 所有位都是'9'：最大值保持不变
   - 第一位是'0'：不可能，因为输入保证是正整数
   - 单位数：第一位替换为'0'后变成0
   
6. 示例分析：
   - num = 11891
   - 最大值：找到第一个非'9'的数字'1'，替换为'9' → 99899
   - 最小值：将第一位'1'全部替换为'0' → 00890 = 890  
   - 差值：99899 - 890 = 99009
*/
