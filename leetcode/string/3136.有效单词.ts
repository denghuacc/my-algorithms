/*
 * @lc app=leetcode.cn id=3136 lang=typescript
 *
 * [3136] 有效单词
 *
 * https://leetcode.cn/problems/valid-word/description/
 *
 * algorithms
 * Easy (50.88%)
 * Likes:    13
 * Dislikes: 0
 * Total Accepted:    16.1K
 * Total Submissions: 29.5K
 * Testcase Example:  '"234Adas"'
 *
 * 有效单词 需要满足以下几个条件：
 *
 *
 * 至少 包含 3 个字符。
 * 由数字 0-9 和英文大小写字母组成。（不必包含所有这类字符。）
 * 至少 包含一个 元音字母 。
 * 至少 包含一个 辅音字母 。
 *
 *
 * 给你一个字符串 word 。如果 word 是一个有效单词，则返回 true ，否则返回 false 。
 *
 * 注意：
 *
 *
 * 'a'、'e'、'i'、'o'、'u' 及其大写形式都属于 元音字母 。
 * 英文中的 辅音字母 是指那些除元音字母之外的字母。
 *
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：word = "234Adas"
 *
 * 输出：true
 *
 * 解释：
 *
 * 这个单词满足所有条件。
 *
 *
 * 示例 2：
 *
 *
 * 输入：word = "b3"
 *
 * 输出：false
 *
 * 解释：
 *
 * 这个单词的长度少于 3 且没有包含元音字母。
 *
 *
 * 示例 3：
 *
 *
 * 输入：word = "a3$e"
 *
 * 输出：false
 *
 * 解释：
 *
 * 这个单词包含了 '$' 字符且没有包含辅音字母。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= word.length <= 20
 * word 由英文大上和小写字母、数字、'@'、'#' 和 '$' 组成。
 *
 *
 */

export {};

// @lc code=start
function isValid(word: string): boolean {
  // 条件1：长度检查 - 至少包含3个字符
  if (word.length < 3) return false;

  // 使用标记变量跟踪是否找到元音和辅音
  let hasVowel = false; // 是否包含元音字母
  let hasConsonant = false; // 是否包含辅音字母

  // 遍历字符串中的每个字符
  for (const ch of word) {
    // 条件2：字符合法性检查 - 不能包含 @、#、$ 等非法字符
    if (isInvalid(ch)) {
      return false;
    }

    // 条件3：检查是否为元音字母
    if (isVowel(ch)) {
      hasVowel = true;
    }

    // 条件4：检查是否为辅音字母（字母但非元音）
    if (isConsonant(ch)) {
      hasConsonant = true;
    }
  }

  // 返回结果：必须同时包含元音和辅音
  return hasVowel && hasConsonant;

  /**
   * 判断字符是否为非法字符
   * 非法字符包括：@、#、$
   */
  function isInvalid(ch: string): boolean {
    return ch === "@" || ch === "#" || ch === "$";
  }

  /**
   * 判断字符是否为元音字母
   * 元音字母：a、e、i、o、u 及其大写形式
   */
  function isVowel(ch: string): boolean {
    const vowels = new Set(["a", "e", "i", "o", "u", "A", "E", "I", "O", "U"]);
    return vowels.has(ch);
  }

  /**
   * 判断字符是否为辅音字母
   * 辅音字母：英文字母但不是元音字母
   */
  function isConsonant(ch: string): boolean {
    return !isVowel(ch) && !isDigit(ch);
  }

  /**
   * 判断字符是否为数字
   * 数字范围：0-9
   */
  function isDigit(ch: string): boolean {
    return ch >= "0" && ch <= "9";
  }
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 验证字符串是否符合"有效单词"的定义
   - 需要同时满足4个条件：长度、字符类型、元音、辅音

2. 算法分析：
   - 时间复杂度：O(n)，其中n是字符串长度，需要遍历一次字符串
   - 空间复杂度：O(1)，只使用了常数级别的额外空间（不计算元音集合的固定空间）
   - 算法类型：字符串遍历 + 条件判断

3. 实现要点：

   3.1 条件分解：
   - 长度条件：直接检查 word.length >= 3
   - 字符合法性：排除 @、#、$ 等非法字符
   - 元音条件：使用 Set 快速查找元音字母
   - 辅音条件：字母但非元音且非数字

   3.2 一次遍历策略：
   - 使用两个布尔标记追踪元音和辅音的存在
   - 遇到非法字符立即返回 false（短路优化）
   - 在遍历过程中更新标记状态

   3.3 字符分类逻辑：
   - 元音：使用 Set 存储所有元音字母（大小写）
   - 数字：通过字符比较判断 '0' <= ch <= '9'
   - 辅音：既不是元音也不是数字的字符
   - 非法字符：明确列出的特殊符号

4. 优化思路：

   4.1 提前终止：
   - 长度不足3直接返回 false
   - 遇到非法字符立即返回 false
   - 可以在找到元音和辅音后继续遍历验证字符合法性

   4.2 数据结构选择：
   - 使用 Set 而非数组查找元音，时间复杂度 O(1)
   - 字符比较判断数字，避免正则表达式开销

   4.3 代码简化：
   - 辅助函数提高代码可读性
   - 明确的变量命名表达意图

5. 边界情况处理：
   - 空字符串或长度小于3：返回 false
   - 只包含数字：缺少元音和辅音，返回 false
   - 只包含元音：缺少辅音，返回 false
   - 只包含辅音：缺少元音，返回 false
   - 包含非法字符：返回 false
   - 大小写混合：正确处理大小写元音

6. 算法要点总结：

   6.1 核心技巧：
   - 状态标记：用布尔变量跟踪条件满足情况
   - 字符分类：清晰的字符类型判断逻辑
   - 一次遍历：在单次循环中完成所有检查

   6.2 关键观察：
   - 辅音 = 字母 - 元音，通过排除法定义
   - 合法字符 = 字母 + 数字，通过排除非法字符验证
   - 条件之间相互独立，可以并行检查

   6.3 类似问题：
   - 字符串验证类问题（密码强度、邮箱格式）
   - 字符分类统计问题
   - 多条件判断的字符串处理

7. 常见错误：
   - 忘记检查大写元音字母
   - 混淆辅音定义（包含数字或非法字符）
   - 提前返回导致未完整验证所有条件
   - 使用效率较低的字符串方法（如正则表达式）
*/
