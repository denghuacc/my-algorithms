/*
 * @lc app=leetcode.cn id=1394 lang=typescript
 *
 * [1394] 找出数组中的幸运数
 *
 * https://leetcode.cn/problems/find-lucky-integer-in-an-array/description/
 *
 * algorithms
 * Easy (69.35%)
 * Likes:    64
 * Dislikes: 0
 * Total Accepted:    37.9K
 * Total Submissions: 54.7K
 * Testcase Example:  '[2,2,3,4]'
 *
 * 在整数数组中，如果一个整数的出现频次和它的数值大小相等，我们就称这个整数为「幸运数」。
 * 
 * 给你一个整数数组 arr，请你从中找出并返回一个幸运数。
 * 
 * 
 * 如果数组中存在多个幸运数，只需返回 最大 的那个。
 * 如果数组中不含幸运数，则返回 -1 。
 * 
 * 
 * 
 * 
 * 示例 1：
 * 
 * 输入：arr = [2,2,3,4]
 * 输出：2
 * 解释：数组中唯一的幸运数是 2 ，因为数值 2 的出现频次也是 2 。
 * 
 * 
 * 示例 2：
 * 
 * 输入：arr = [1,2,2,3,3,3]
 * 输出：3
 * 解释：1、2 以及 3 都是幸运数，只需要返回其中最大的 3 。
 * 
 * 
 * 示例 3：
 * 
 * 输入：arr = [2,2,2,3,3]
 * 输出：-1
 * 解释：数组中不存在幸运数。
 * 
 * 
 * 示例 4：
 * 
 * 输入：arr = [5]
 * 输出：-1
 * 
 * 
 * 示例 5：
 * 
 * 输入：arr = [7,7,7,7,7,7,7]
 * 输出：7
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 1 <= arr.length <= 500
 * 1 <= arr[i] <= 500
 * 
 * 
 */

export {};

// @lc code=start
function findLucky(arr: number[]): number {
    // 使用 Map 统计每个数字的出现次数
    const cnt = new Map<number, number>();
    
    // 遍历数组，统计每个数字的频率
    for (const num of arr) {
        cnt.set(num, (cnt.get(num) || 0) + 1);
    }
    
    // 初始化结果为 -1（表示没有找到幸运数）
    let res = -1;
    
    // 遍历统计结果，查找幸运数
    for (const [num, count] of cnt.entries()) {
        // 如果数字的值等于其出现次数，则为幸运数
        if (num === count) {
            // 更新结果为最大的幸运数
            res = Math.max(res, num);
        }
    }
    
    return res;
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 核心问题：在数组中找出满足"数值等于出现次数"的数字，返回其中最大的
   - 关键特点：需要统计频率，然后比较数值与频率的关系
   - 目标：找到最大的幸运数，如果没有则返回 -1

2. 算法分析：
   - 时间复杂度：O(n)，其中 n 是数组长度
     * 第一次遍历：统计频率 O(n)
     * 第二次遍历：查找幸运数 O(k)，其中 k 是不同数字的个数，k ≤ n
   - 空间复杂度：O(k)，其中 k 是不同数字的个数
     * 使用 Map 存储每个数字的频率，最坏情况下需要存储所有不同的数字
   - 算法类型：哈希表统计 + 遍历查找

3. 实现要点：
   - 关键数据结构选择：使用 Map 进行频率统计，提供 O(1) 的查找和更新操作
   - 核心算法步骤：
     * 第一步：遍历数组统计每个数字的出现次数
     * 第二步：遍历统计结果，检查每个数字是否为幸运数
     * 第三步：维护最大值，返回结果
   - 边界情况处理：
     * 没有幸运数时返回 -1
     * 多个幸运数时返回最大值

4. 优化思路：
   - 性能优化点：使用 Map 而不是对象，提供更好的性能和类型安全
   - 代码简化技巧：使用 Math.max 简化最大值更新逻辑
   - 内存优化策略：可以在一次遍历中完成统计和查找，但会降低代码可读性

5. 示例分析：
   示例：[2,2,3,4]
   - 统计结果：{2: 2, 3: 1, 4: 1}
   - 检查幸运数：
     * 2: 数值=2, 频率=2 ✓ (幸运数)
     * 3: 数值=3, 频率=1 ✗ (不是幸运数)
     * 4: 数值=4, 频率=1 ✗ (不是幸运数)
   - 结果：返回最大的幸运数 2

6. 算法要点总结：
   - 核心技巧：哈希表统计 + 条件判断
   - 通用方法：频率统计是很多数组问题的常用技巧
   - 类似问题：可以使用相同思路解决字符频率、元素计数等问题

7. 常见错误：
   - 忘记处理没有幸运数的情况
   - 没有正确处理多个幸运数时返回最大值的要求
   - 使用数组而不是 Map 进行统计，导致空间复杂度增加
*/

