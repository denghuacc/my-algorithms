/*
 * @lc app=leetcode.cn id=407 lang=typescript
 *
 * [407] 接雨水 II
 *
 * https://leetcode-cn.com/problems/trapping-rain-water-ii/description/
 *
 * algorithms
 * Hard (48.36%)
 * Likes:    423
 * Dislikes: 0
 * Total Accepted:    12.5K
 * Total Submissions: 24.4K
 * Testcase Example:  '[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]'
 *
 * 给你一个 m x n 的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。
 *
 *
 *
 * 示例 1:
 *
 *
 *
 *
 * 输入: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
 * 输出: 4
 * 解释: 下雨后，雨水将会被上图蓝色的方块中。总的接雨水量为1+2+1=4。
 *
 *
 * 示例 2:
 *
 *
 *
 *
 * 输入: heightMap =
 * [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
 * 输出: 10
 *
 *
 *
 *
 * 提示:
 *
 *
 * m == heightMap.length
 * n == heightMap[i].length
 * 1 <= m, n <= 200
 * 0 <= heightMap[i][j] <= 2 * 10^4
 *
 *
 *
 *
 */

// @lc code=start
/**
 * 解法：BFS + 优先队列思想
 * 核心思想：从边界开始，逐步向内部扩散，维护每个位置能够达到的最小水位
 * 时间复杂度：O(m*n*log(m*n)) - 如果使用优先队列
 * 空间复杂度：O(m*n)
 *
 * 这里使用简化的BFS实现，时间复杂度为 O(m*n*k)，k为迭代轮数
 */
function trapRainWater(heightMap: number[][]): number {
  const m = heightMap.length;
  const n = heightMap[0].length;
  // 四个方向：上、右、下、左
  const DIRS = [-1, 0, 1, 0, -1];

  // 找到整个地图的最大高度，作为初始水位的上界
  let maxHeight = 0;
  for (let i = 0; i < m; ++i) {
    for (let j = 0; j < n; ++j) {
      maxHeight = Math.max(maxHeight, heightMap[i][j]);
    }
  }

  // water[i][j] 表示位置(i,j)能够达到的最小水位高度
  const water = new Array(m).fill(0).map(() => new Array(n).fill(0));

  // 初始化：所有位置的水位都设为最大高度（最保守的估计）
  for (let i = 0; i < m; ++i) {
    for (let j = 0; j < n; ++j) {
      water[i][j] = maxHeight;
    }
  }

  // BFS队列，存储需要更新的位置坐标
  const queue: [number, number][] = [];

  // 从边界开始：边界位置的水位不能超过其地面高度
  // 因为水会从边界流出
  for (let i = 0; i < m; ++i) {
    for (let j = 0; j < n; ++j) {
      // 判断是否为边界位置
      if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
        // 边界位置的水位最多只能是地面高度
        if (water[i][j] > heightMap[i][j]) {
          water[i][j] = heightMap[i][j];
          // 将边界位置加入队列，作为BFS的起点
          queue.push([i, j]);
        }
      }
    }
  }

  // BFS过程：从边界向内部传播，更新每个位置的最小可能水位
  while (queue.length) {
    const curr = queue.shift()!;
    const x = curr[0];
    const y = curr[1];

    // 检查四个相邻方向
    for (let i = 0; i < 4; ++i) {
      const nx = x + DIRS[i];
      const ny = y + DIRS[i + 1];

      // 边界检查
      if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
        continue;
      }

      // 核心逻辑：如果相邻位置的水位可以被当前位置影响而降低
      if (water[x][y] < water[nx][ny] && water[nx][ny] > heightMap[nx][ny]) {
        // 相邻位置的新水位 = max(当前位置水位, 相邻位置地面高度)
        // 这保证了：1. 水不会倒流 2. 水位不会低于地面
        water[nx][ny] = Math.max(water[x][y], heightMap[nx][ny]);
        // 将更新后的位置加入队列，继续传播
        queue.push([nx, ny]);
      }
    }
  }

  // 计算总的接雨水量：每个位置的水位 - 地面高度
  let res = 0;
  for (let i = 0; i < m; ++i) {
    for (let j = 0; j < n; ++j) {
      res += water[i][j] - heightMap[i][j];
    }
  }
  return res;
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 这是二维版本的接雨水问题，需要考虑四个方向的水流
   - 核心在于确定每个位置能够保持的最小水位高度
   - 水会从边界流出，所以边界是关键的约束条件

2. 算法分析：
   - 时间复杂度：O(m*n*k) - k为BFS迭代轮数，最坏情况下可能需要多轮
   - 空间复杂度：O(m*n) - 需要额外的water数组和BFS队列
   - 算法类型：BFS + 贪心思想

3. 核心解题思路：
   - 关键洞察：每个位置的最终水位取决于它到边界的"最低路径"上的最高点
   - 核心思想：从边界开始，逐步向内部传播水位信息
   - 算法步骤：
     1. 初始化所有位置的水位为最大值（最保守估计）
     2. 设置边界条件：边界位置的水位等于其地面高度
     3. 使用BFS从边界向内部传播，更新每个位置的最小可能水位
     4. 计算每个位置的积水量：水位 - 地面高度

4. 算法详细步骤：

   步骤1：初始化阶段
   - 创建water数组，记录每个位置的水位高度
   - 初始时将所有位置的水位设为地图最大高度
   - 这是一个保守的上界估计

   步骤2：边界处理
   - 遍历所有边界位置（第一行、最后一行、第一列、最后一列）
   - 边界位置的水位不能超过其地面高度（因为水会流出）
   - 将所有需要更新的边界位置加入BFS队列

   步骤3：BFS传播
   - 从队列中取出位置，检查其四个相邻位置
   - 如果相邻位置的水位可以通过当前位置降低，则更新之
   - 更新规则：new_water = max(current_water, neighbor_ground_height)
   - 将更新后的位置加入队列，继续传播

   步骤4：计算结果
   - 遍历所有位置，计算 water[i][j] - heightMap[i][j]
   - 累加得到总的接雨水量

5. 关键算法特性：

   单调性保证：
   - 水位只会降低，不会升高
   - 这保证了算法的收敛性和正确性

   路径最优性：
   - 每个位置的最终水位是所有可能"泄水路径"中的最小值
   - BFS保证了我们找到最短的影响路径

   边界约束：
   - 边界是天然的泄水点，限制了整个系统的水位上限
   - 从边界开始传播是算法正确性的关键

6. 示例分析：
   
   示例1：heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
   
   初始状态：
   - 最大高度 = 4
   - 所有位置水位初始化为 4
   
   边界处理：
   - 边界位置水位设为其地面高度
   - 边界位置：(0,*)、(2,*)、(*,0)、(*,5)
   
   BFS传播过程：
   - 从边界开始，逐步向内部传播较低的水位
   - 中心区域 (1,2) 的最终水位为 2，地面高度为 1，积水量为 1
   - 类似地计算其他位置的积水量
   
   最终结果：总积水量 = 4

7. 优化解法对比：

   当前解法（简化BFS）：
   - 优点：实现简单，易于理解
   - 缺点：可能需要多轮迭代，时间复杂度较高

   优化解法（优先队列 + Dijkstra）：
   - 使用最小堆优先处理水位最低的位置
   - 时间复杂度：O(m*n*log(m*n))
   - 保证每个位置只被处理一次

8. 与一维接雨水的对比：

   一维接雨水（LeetCode 42）：
   - 可以用双指针从两端向中间扫描
   - 时间复杂度：O(n)

   二维接雨水（本题）：
   - 必须考虑四个方向的约束
   - 需要使用BFS或优先队列算法
   - 复杂度必然更高

9. 常见陷阱：
   - 忘记处理边界条件（边界位置水位等于地面高度）
   - BFS更新条件错误（需要同时检查水位差和地面约束）
   - 初始化错误（应该用最大值作为初始水位）
   - 方向数组使用错误（DIRS数组的巧妙用法）

10. 实际应用：
    - 地形雨水收集系统设计
    - 洪水模拟和预警系统
    - 游戏中的地形水位计算
    - 建筑排水系统优化

11. 扩展思考：
    - 三维接雨水问题
    - 动态地形变化下的雨水收集
    - 考虑水流速度和时间因素的高级模拟
    - 多个出水口的复杂地形问题

12. 算法核心要点：
    - 边界约束是问题的核心
    - BFS保证了影响的传播性
    - 贪心策略保证了最优性
    - 单调性保证了收敛性
*/
