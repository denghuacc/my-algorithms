/*
 * @lc app=leetcode.cn id=909 lang=typescript
 *
 * [909] 蛇梯棋
 *
 * https://leetcode-cn.com/problems/snakes-and-ladders/description/
 *
 * algorithms
 * Medium (37.87%)
 * Likes:    42
 * Dislikes: 0
 * Total Accepted:    4.2K
 * Total Submissions: 11.1K
 * Testcase Example:  '[[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]'
 *
 * N x N 的棋盘 board 上，按从 1 到 N*N 的数字给方格编号，编号 从左下角开始，每一行交替方向。
 *
 * 例如，一块 6 x 6 大小的棋盘，编号如下：
 *
 *
 *
 *
 * r 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 "蛇" 或 "梯子"；如果 board[r][c] != -1，那个蛇或梯子的目的地将会是
 * board[r][c]。
 *
 * 玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。
 *
 * 每一回合，玩家需要从当前方格 x 开始出发，按下述要求前进：
 *
 *
 * 选定目标方格：选择从编号 x+1，x+2，x+3，x+4，x+5，或者 x+6 的方格中选出一个目标方格 s ，目标方格的编号 <=
 * N*N。
 *
 *
 * 该选择模拟了掷骰子的情景，无论棋盘大小如何，你的目的地范围也只能处于区间 [x+1, x+6] 之间。
 *
 *
 * 传送玩家：如果目标方格 S 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 S。
 *
 *
 * 注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，你也不会继续移动。
 *
 * 返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 -1。
 *
 *
 *
 * 示例：
 *
 * 输入：[
 * [-1,-1,-1,-1,-1,-1],
 * [-1,-1,-1,-1,-1,-1],
 * [-1,-1,-1,-1,-1,-1],
 * [-1,35,-1,-1,13,-1],
 * [-1,-1,-1,-1,-1,-1],
 * [-1,15,-1,-1,-1,-1]]
 * 输出：4
 * 解释：
 * 首先，从方格 1 [第 5 行，第 0 列] 开始。
 * 你决定移动到方格 2，并必须爬过梯子移动到到方格 15。
 * 然后你决定移动到方格 17 [第 3 行，第 5 列]，必须爬过蛇到方格 13。
 * 然后你决定移动到方格 14，且必须通过梯子移动到方格 35。
 * 然后你决定移动到方格 36, 游戏结束。
 * 可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 2 <= board.length = board[0].length <= 20
 * board[i][j] 介于 1 和 N*N 之间或者等于 -1。
 * 编号为 1 的方格上没有蛇或梯子。
 * 编号为 N*N 的方格上没有蛇或梯子。
 *
 *
 */

// @lc code=start
// BFS 广度优先搜索求最短路径
function snakesAndLadders(board: number[][]): number {
  const n = board.length;
  // 记录已访问的位置，避免重复访问
  const visited: Set<number> = new Set();
  // BFS队列：[当前位置编号, 到达此位置的步数]
  const queue: [number, number][] = [[1, 0]];

  while (queue.length) {
    const p = queue.shift()!;
    // 模拟掷骰子：每次可以移动1-6步
    for (let i = 1; i <= 6; i++) {
      let next = p[0] + i;
      // 如果移动超出棋盘范围，跳出循环
      if (next > n * n) {
        break;
      }

      // 将位置编号转换为棋盘坐标
      const [row, col] = id2rc(next, n);
      // 检查当前位置是否有蛇或梯子
      if (board[row][col] > 0) {
        // 有蛇或梯子，传送到目标位置
        next = board[row][col];
      }

      // 如果到达终点，返回步数
      if (next === n * n) {
        return p[1] + 1;
      }

      // 如果该位置未访问过，加入队列继续搜索
      if (!visited.has(next)) {
        visited.add(next);
        queue.push([next, p[1] + 1]);
      }
    }
  }

  // 无法到达终点
  return -1;

  /**
   * 将位置编号转换为棋盘的行列坐标
   * @param id 位置编号 (1 到 n*n)
   * @param n 棋盘大小
   * @returns [row, col] 棋盘坐标
   */
  function id2rc(id: number, n: number): [number, number] {
    // 计算在第几行（从下往上数，从0开始）
    const r = Math.floor((id - 1) / n);
    // 计算在第几列
    let c = (id - 1) % n;
    // 奇数行需要从右往左编号，所以要反转列坐标
    if (r % 2 === 1) {
      c = n - 1 - c;
    }
    // 返回数组坐标：行需要反转（因为编号从下往上，数组从上往下）
    return [n - 1 - r, c];
  }
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 在蛇梯棋盘上寻找从起点1到终点N*N的最短路径
   - 棋盘编号规则：从左下角开始，每行交替方向编号
   - 每次移动1-6步（模拟掷骰子），遇到蛇梯需要传送

2. 算法分析：
   - 时间复杂度：O(N²) - 最坏情况访问每个位置一次
   - 空间复杂度：O(N²) - visited集合和BFS队列的存储空间
   - 算法类型：广度优先搜索（BFS）+ 图论最短路径

3. 实现要点：
   
   a) 坐标转换函数 id2rc：
      - 位置编号从1开始，需要转换为0开始的数组下标
      - 棋盘编号从左下角开始，每行交替方向
      - 奇数行（r%2==1）需要反转列坐标
      - 最终行坐标需要反转（编号从下往上，数组从上往下）
   
   b) BFS搜索策略：
      - 使用队列存储[位置, 步数]状态
      - 每次从当前位置尝试移动1-6步
      - 检查目标位置是否有蛇梯，有则传送
      - 用visited集合避免重复访问
   
   c) 边界条件处理：
      - 移动超出棋盘范围时停止
      - 到达终点时立即返回
      - BFS结束仍未到达则返回-1

4. 优化思路：
   
   a) 提前终止优化：
      - 一旦到达终点立即返回，不继续搜索
      - 移动超出范围时跳出当前循环
   
   b) 空间优化：
      - 使用Set而非数组记录访问状态
      - 队列中只存储必要信息[位置, 步数]
   
   c) 算法正确性保证：
      - BFS天然保证找到的第一条路径是最短的
      - visited机制确保每个位置只被访问一次
      - 正确处理蛇梯传送逻辑

核心难点：
1. 棋盘编号到坐标的正确转换（交替编号模式）
2. BFS搜索中状态的正确管理和去重
3. 蛇梯传送机制的正确实现
*/
