/*
 * @lc app=leetcode.cn id=684 lang=typescript
 *
 * [684] 冗余连接
 *
 * https://leetcode-cn.com/problems/redundant-connection/description/
 *
 * algorithms
 * Medium (60.48%)
 * Likes:    161
 * Dislikes: 0
 * Total Accepted:    18.3K
 * Total Submissions: 30.2K
 * Testcase Example:  '[[1,2],[1,3],[2,3]]'
 *
 * 在本问题中, 树指的是一个连通且无环的无向图。
 *
 * 输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N)
 * 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。
 *
 * 结果图是一个以边组成的二维数组。每一个边的元素是一对[u, v] ，满足 u < v，表示连接顶点u 和v的无向图的边。
 *
 * 返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边 [u, v] 应满足相同的格式 u <
 * v。
 *
 * 示例 1：
 *
 * 输入: [[1,2], [1,3], [2,3]]
 * 输出: [2,3]
 * 解释: 给定的无向图为:
 * ⁠ 1
 * ⁠/ \
 * 2 - 3
 *
 *
 * 示例 2：
 *
 * 输入: [[1,2], [2,3], [3,4], [1,4], [1,5]]
 * 输出: [1,4]
 * 解释: 给定的无向图为:
 * 5 - 1 - 2
 * ⁠   |   |
 * ⁠   4 - 3
 *
 *
 * 注意:
 *
 *
 * 输入的二维数组大小在 3 到 1000。
 * 二维数组中的整数在1到N之间，其中N是输入数组的大小。
 *
 *
 * 更新(2017-09-26):
 * 我们已经重新检查了问题描述及测试用例，明确图是无向 图。对于有向图详见冗余连接II。对于造成任何不便，我们深感歉意。
 *
 */

// @lc code=start
/**
 * 并查集 (Union Find) 解决方案
 *
 * 核心思想：遍历所有边，使用并查集维护连通分量，当发现一条边连接的两个节点已经在同一连通分量中时，这条边就是冗余边
 */
function findRedundantConnection(edges: number[][]): number[] {
  // 初始化并查集，节点编号从1开始
  const parent: number[] = new Array(1001).fill(0);
  for (let i = 1; i <= 1000; i++) {
    parent[i] = i; // 每个节点初始时是自己的父节点
  }

  // 遍历所有边
  for (const edge of edges) {
    // 尝试合并两个节点，如果失败说明这条边是冗余的
    if (!union(edge[0], edge[1])) {
      return edge; // 返回冗余边
    }
  }

  return []; // 理论上不会到达这里

  /**
   * 合并两个节点所在的集合
   * @param x 第一个节点
   * @param y 第二个节点
   * @returns 是否成功合并（true表示成功，false表示已经在同一集合中）
   */
  function union(x: number, y: number): boolean {
    const rootX = find(x); // 找到x的根节点
    const rootY = find(y); // 找到y的根节点

    // 如果根节点相同，说明已经在同一集合中，无法合并
    if (rootX === rootY) {
      return false;
    }

    // 合并两个集合
    parent[rootX] = rootY;
    return true;
  }

  /**
   * 查找节点的根节点（带路径压缩优化）
   * @param x 要查找的节点
   * @returns 节点x的根节点
   */
  function find(x: number): number {
    while (parent[x] !== x) {
      // 路径压缩：将x的父节点直接指向祖父节点
      parent[x] = parent[parent[x]];
      x = parent[x];
    }
    return x;
  }
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 给定一个无向图，其中包含一棵树和一条额外的边
   - 需要找到那条额外的边，使得删除后图变成一棵树
   - 本质是检测图中形成环的边

2. 算法分析：
   - 时间复杂度：O(n * α(n))，其中n是边的数量，α是阿克曼函数的反函数
     * 并查集的查找和合并操作接近O(1)
     * 需要遍历所有边
   - 空间复杂度：O(n)，并查集数组
   - 算法类型：并查集 (Union Find)

3. 实现要点：
   - 使用并查集维护连通分量
   - 遍历边时，如果两个端点已经在同一连通分量中，则该边是冗余的
   - 路径压缩优化查找效率
   - 按顺序遍历边，返回最后出现的冗余边

4. 优化思路：
   - 路径压缩：find函数中直接更新父节点
   - 按秩合并：可以进一步优化（此题数据规模较小，未使用）
   - 提前返回：发现冗余边立即返回，无需继续处理

5. 关键技巧：
   - 并查集的路径压缩：parent[x] = parent[parent[x]]
   - 冗余边检测：union返回false时说明形成环
   - 按顺序处理：返回最后出现的冗余边

6. 算法步骤：
   - 初始化并查集，每个节点属于自己
   - 遍历每条边，尝试合并两个端点
   - 如果合并失败，说明这条边会形成环，返回该边
   - 如果所有边都处理完，返回空数组（理论上不会发生）

7. 类似问题：
   - 冗余连接II (685)
   - 最小生成树问题
   - 图的连通性问题
   - 任何需要检测环的问题

8. 算法优势：
   - 时间复杂度接近线性
   - 代码简洁，逻辑清晰
   - 适合处理图的连通性问题
*/
