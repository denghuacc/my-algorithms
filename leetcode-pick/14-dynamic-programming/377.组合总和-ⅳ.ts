/*
 * @lc app=leetcode.cn id=377 lang=typescript
 *
 * [377] 组合总和 Ⅳ
 *
 * https://leetcode-cn.com/problems/combination-sum-iv/description/
 *
 * algorithms
 * Medium (44.48%)
 * Likes:    379
 * Dislikes: 0
 * Total Accepted:    39.3K
 * Total Submissions: 82.2K
 * Testcase Example:  '[1,2,3]\n4'
 *
 * 给你一个由 不同 整数组成的数组 nums ，和一个目标整数 target 。请你从 nums 中找出并返回总和为 target 的元素组合的个数。
 *
 * 题目数据保证答案符合 32 位整数范围。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：nums = [1,2,3], target = 4
 * 输出：7
 * 解释：
 * 所有可能的组合为：
 * (1, 1, 1, 1)
 * (1, 1, 2)
 * (1, 2, 1)
 * (1, 3)
 * (2, 1, 1)
 * (2, 2)
 * (3, 1)
 * 请注意，顺序不同的序列被视作不同的组合。
 *
 *
 * 示例 2：
 *
 *
 * 输入：nums = [9], target = 3
 * 输出：0
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1
 * 1
 * nums 中的所有元素 互不相同
 * 1
 *
 *
 *
 *
 * 进阶：如果给定的数组中含有负数会发生什么？问题会产生何种变化？如果允许负数出现，需要向题目中添加哪些限制条件？
 *
 */

// @lc code=start
/**
 * 动态规划解法
 * 核心思想：dp[i]表示目标和为i的组合个数，考虑顺序
 */
function combinationSum4(nums: number[], target: number): number {
  // dp[i] 表示目标和为i的组合个数
  const dp: number[] = new Array(target + 1).fill(0);
  // 目标和为0的组合个数为1（空组合）
  dp[0] = 1;

  // 从小到大计算每个目标和
  for (let i = 0; i <= target; i++) {
    // 尝试每个数字作为最后一个数字
    for (const num of nums) {
      // 如果当前数字小于等于目标和，可以添加到组合中
      if (num <= i) {
        // 状态转移：dp[i] += dp[i - num]
        // 表示在dp[i-num]的所有组合后面加上num
        dp[i] += dp[i - num];
      }
    }
  }

  return dp[target];
}
// @lc code=end

/*
解题思路详解：

1. 问题本质：
   - 给定不同整数数组和目标值，求组合个数
   - 顺序不同的序列被视为不同组合
   - 每个数字可以使用多次
   - 求所有可能的组合数量

2. 算法分析：
   - 时间复杂度：O(target * len(nums))
   - 空间复杂度：O(target)
   - 算法类型：动态规划（完全背包问题，考虑顺序）

3. 实现要点：
   - 状态定义：dp[i]表示目标和为i的组合个数
   - 状态转移：dp[i] += dp[i - num] for all nums where num <= i
   - 边界条件：dp[0] = 1（空组合）
   - 遍历顺序：外层遍历目标和，内层遍历数字

4. 优化思路：
   - 剪枝：只考虑小于等于当前目标和的数字
   - 空间优化：使用一维数组
   - 数值溢出：注意32位整数范围

5. 边界情况：
   - target = 0：返回1（空组合）
   - target < 0：返回0
   - nums为空：返回0
   - 无法达到目标：返回0

6. 类似问题：
   - 零钱兑换（求最少硬币数）
   - 组合总和（不考虑顺序）
   - 其他背包问题

7. 关键洞察：
   - 这是一个完全背包问题，但考虑顺序
   - 外层遍历目标和，内层遍历数字
   - 每个位置的状态依赖于所有可能的子问题

8. 示例分析：
   nums = [1,2,3], target = 4
   - dp[0] = 1
   - dp[1] = dp[0] = 1 (1)
   - dp[2] = dp[1] + dp[0] = 2 (1+1, 2)
   - dp[3] = dp[2] + dp[1] + dp[0] = 4 (1+1+1, 1+2, 2+1, 3)
   - dp[4] = dp[3] + dp[2] + dp[1] = 7 (1+1+1+1, 1+1+2, 1+2+1, 1+3, 2+1+1, 2+2, 3+1)

9. 与零钱兑换的区别：
   - 零钱兑换：求最少硬币数，不考虑顺序
   - 组合总和IV：求组合个数，考虑顺序
   - 遍历顺序不同：零钱兑换内层遍历目标和，组合总和IV外层遍历目标和

10. 状态转移理解：
    - 对于目标和i，尝试每个数字num作为最后一个数字
    - 如果num <= i，则dp[i] += dp[i - num]
    - 这表示在dp[i-num]的所有组合后面加上num
    - 由于考虑顺序，每个位置都会产生新的组合
*/
