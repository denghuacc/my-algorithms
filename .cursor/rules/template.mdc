---
description: 
globs: ["**/leetcode/**/*.ts", "**/leetcode/**/*.*"]
alwaysApply: true
---
# 算法代码文件结构规范

## 文件结构说明

每个算法代码文件必须严格按照以下三个部分组织，**绝对不能打乱顺序**：

### 1. 题目描述部分（顶部）
```typescript
/*
 * @lc app=leetcode.cn id=题目编号 lang=typescript
 *
 * [题目编号] 题目标题
 *
 * https://leetcode.cn/problems/问题链接/description/
 *
 * algorithms
 * 难度 (通过率%)
 * Likes:    点赞数
 * Dislikes: 点踩数
 * Total Accepted:    通过次数
 * Total Submissions: 提交次数
 * Testcase Example:  '测试用例'
 *
 * 题目详细描述...
 * 
 * 示例：
 * 输入：...
 * 输出：...
 * 解释：...
 *
 * 提示：
 * - 约束条件1
 * - 约束条件2
 */

export {};
```

**重要规则：**
- 这部分内容来自 LeetCode 插件，**禁止修改或删除**
- 保持原有的注释格式和内容
- `lang=typescript` 等语言标识不可更改

### 2. 算法实现部分（中间）
```typescript
// @lc code=start
function 函数名(参数列表): 返回类型 {
  // 在这里实现算法逻辑
  // 可以添加详细的实现注释
  // 解释关键步骤和数据结构选择
}
// @lc code=end
```

**编码规范：**
- 函数签名来自 LeetCode 插件，**不要修改函数名和参数**
- 在函数内部添加实现代码
- 可以添加辅助函数（在主函数前面）
- 注释要简洁明了，解释关键逻辑
- 使用有意义的变量名

### 3. 解题思路部分（底部）
```typescript
/*
解题思路详解：

1. 问题本质：
   - 核心问题描述
   - 关键特点分析

2. 算法分析：
   - 时间复杂度：O(?)
   - 空间复杂度：O(?)
   - 算法类型：(如：动态规划、贪心、图论等)

3. 实现要点：
   - 关键数据结构选择
   - 核心算法步骤
   - 边界情况处理

4. 优化思路：
   - 性能优化点
   - 代码简化技巧
   - 内存优化策略
*/
```

## Cursor Agent 操作指南

### ✅ 允许的操作
1. **在算法实现部分**：
   - 编写函数实现代码
   - 添加辅助函数
   - 添加实现注释
   - 优化算法逻辑

2. **在解题思路部分**：
   - 添加详细的思路分析
   - 解释算法原理
   - 分析复杂度
   - 提供优化建议

### ❌ 禁止的操作
1. **不要修改题目描述部分**：
   - 不要删除或修改 LeetCode 插件生成的注释
   - 不要更改 `@lc` 标识
   - 不要修改题目链接和描述

2. **不要破坏文件结构**：
   - 不要在题目描述和代码之间插入解题思路
   - 不要将代码实现放在文件最后
   - 不要删除 `export {};` 语句

3. **不要修改函数签名**：
   - 函数名、参数名、返回类型保持不变
   - 不要更改 `// @lc code=start` 和 `// @lc code=end` 标记

## 代码风格要求

### 注释规范
```typescript
// 单行注释：解释具体实现逻辑
/* 
 * 多行注释：解释复杂算法思路
 * 或者重要的数据结构设计
 */
```

### 变量命名
- 使用有意义的变量名：`left`, `right`, `maxValue`
- 避免单字母变量：除了循环变量 `i`, `j`, `k`
- 常量使用大写：`MAX_SIZE`, `DEFAULT_VALUE`

### 函数组织
```typescript
// 辅助函数（如果需要）
function helper(params): type {
  // 实现
}

// @lc code=start
function 主函数(params): type {
  // 主要逻辑
}
// @lc code=end
```

## 示例文件结构

参考 `leetcode/2359.找到离给定两个节点最近的节点.ts` 的完整结构，确保新文件遵循相同的格式规范。

---

**记住：结构稳定性 > 代码完美性**
保持文件的三段式结构比任何代码优化都重要！
