---
description:
globs: ["**/leetcode/**/*.ts"]
alwaysApply: true
---

# 算法题解答规范

当解答算法题时，请按照以下结构提供详细的解答：

## 1. 题目理解

- **问题本质**：用1-2句话概括问题的核心
- **关键特点**：列出题目的重要特征和约束条件
- **目标**：明确要优化的指标（时间、空间、最值等）

## 2. 解题思路

### 核心思想

- 说明采用的主要算法思路或数据结构
- 解释为什么选择这种方法

### 算法步骤

按顺序列出具体的解题步骤：

1. **第一步**：数据预处理或初始化
2. **第二步**：核心算法逻辑
3. **第三步**：结果处理或优化

## 3. 代码实现

### 完整代码

```typescript
// 提供完整的、可运行的代码实现
// 包含详细的注释说明关键步骤
```

### 关键函数说明

- 解释核心函数的作用和参数
- 说明重要的数据结构选择

## 4. 复杂度分析

- **时间复杂度**：O(?) 并解释为什么
- **空间复杂度**：O(?) 并解释为什么
- **关键观察**：导致该复杂度的核心原因

## 5. 示例分析

### 图解过程

- 用具体示例展示算法执行过程
- 画出关键的数据结构变化
- 逐步展示算法的每个阶段

### 边界情况

- 列出需要特别处理的边界情况
- 说明算法如何处理这些情况

## 6. 算法要点总结

### 核心技巧

- 总结解题中使用的关键技巧
- 说明可以应用到类似问题的通用方法

### 优化要点

- 列出提高性能的优化策略
- 解释为什么这些优化有效

### 类似问题

- 提及可以用相同思路解决的其他问题
- 说明算法的适用范围

## 7. 常见错误

- 列出容易犯的错误
- 提供避免这些错误的建议

---

## 模板使用说明

1. **层次清晰**：从宏观到微观，从思路到实现
2. **图文并茂**：用示例和图解帮助理解
3. **注重细节**：包含复杂度分析和边界情况
4. **举一反三**：总结通用方法和类似问题
5. **实用性强**：提供完整可运行的代码

记住：好的算法解答不仅要正确，更要让读者理解思路、学会方法、触类旁通。
